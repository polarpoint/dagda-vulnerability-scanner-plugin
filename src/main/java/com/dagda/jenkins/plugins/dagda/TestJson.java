package com.dagda.jenkins.plugins.dagda;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import org.apache.http.util.EntityUtils;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.Iterator;

public class TestJson {

    public static void main (String p[]) throws Exception {
        try {

            InputStream is = new FileInputStream("/Users/vishalparmar/Downloads/f.json");
            BufferedReader buf = new BufferedReader(new InputStreamReader(is));
            String line = buf.readLine();
            StringBuilder sb = new StringBuilder();
            while (line != null) {
                sb.append(line).append("\n");
                line = buf.readLine();
            }
            String responseBody = sb.toString();

            // TODO EntityUtils.consume(entity2);
            JSONArray respJson = JSONArray.fromObject(responseBody);
            String status = ((JSONObject) respJson.get(0)).getString("status");

            System.out.println("dagda-engine get policy evaluation response contains no tag eval records. May snooze and retry");
            // Thread.sleep(1000); sleeping here keeps connection open. Unnecessary if the retries have been exhausted


            JSONObject gate_result = JSONObject.fromObject(respJson.get(0)).getJSONObject("static_analysis").getJSONObject("os_packages");
            System.out.println("dagda-engine get policy evaluation response contains no tag eval records.:  "+gate_result.getJSONArray("os_packages_details"));

            for (Object key : gate_result.getJSONArray("os_packages_details")) {
                try {
                    System.out.println("key class"+key.getClass());

                    JSONObject keyObj=(JSONObject) key;
                    Iterator<String> keys = keyObj.keys();

                    while(keys.hasNext()) {
                        String keyV = keys.next();

                        System.out.println(keyV+":"+keyObj.getString(keyV));
                        gate_result.put(keyV,keyObj.getString(keyV));
                    }
                } catch (Exception e) {
                   e.printStackTrace();
                }
            }

        } catch (Exception e) {
            e.printStackTrace();

        }
    }
}
